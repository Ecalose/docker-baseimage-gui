#
# baseimage-gui Dockerfile
#
# https://github.com/jlesage/docker-baseimage-gui
#

ARG BASEIMAGE=unknown

# Pull base image.
FROM ${BASEIMAGE}

# Define software versions.
ARG NGINX_VERSION=1.18.0
ARG NGINXWEBSOCKIFYMOD_VERSION=0.0.3
ARG TIGERVNC_VERSION=1.11.0
ARG XSERVER_VERSION=1.20.10
ARG NOVNC_VERSION=fa559b3
ARG BOOTSTRAP_VERSION=3.3.7
ARG FONTAWESOME_VERSION=4.7.0
ARG JQUERY_VERSION=3.2.1
ARG JQUERY_UI_TOUCH_PUNCH_VERSION=4bc0091

# Define software download URLs.
ARG NGINX_URL=http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
ARG NGINXWEBSOCKIFYMOD_URL=https://github.com/tg123/websockify-nginx-module/archive/v${NGINXWEBSOCKIFYMOD_VERSION}.tar.gz
ARG TIGERVNC_URL=https://github.com/TigerVNC/tigervnc/archive/v${TIGERVNC_VERSION}.tar.gz
ARG XSERVER_URL=https://github.com/freedesktop/xorg-xserver/archive/xorg-server-${XSERVER_VERSION}.tar.gz
ARG NOVNC_URL=https://github.com/jlesage/novnc/archive/${NOVNC_VERSION}.tar.gz
ARG BOOTSTRAP_URL=https://github.com/twbs/bootstrap/releases/download/v${BOOTSTRAP_VERSION}/bootstrap-${BOOTSTRAP_VERSION}-dist.zip
ARG FONTAWESOME_URL=https://fontawesome.com/v${FONTAWESOME_VERSION}/assets/font-awesome-${FONTAWESOME_VERSION}.zip
ARG JQUERY_URL=https://code.jquery.com/jquery-${JQUERY_VERSION}.min.js
ARG JQUERY_UI_TOUCH_PUNCH_URL=https://raw.github.com/furf/jquery-ui-touch-punch/${JQUERY_UI_TOUCH_PUNCH_VERSION}/jquery.ui.touch-punch.min.js

# Define working directory.
WORKDIR /tmp

# Install the nodejs PPA.
RUN \
    add-pkg --virtual build-dependencies curl ca-certificates gnupg && \
    . /etc/os-release && \
    curl -s https://deb.nodesource.com/gpgkey/nodesource.gpg.key | apt-key --keyring /etc/apt/trusted.gpg.d/nodesource.gpg add - && \
    echo "deb http://deb.nodesource.com/node_12.x $VERSION_CODENAME main" > /etc/apt/sources.list.d/nodesource.list && \
    echo "deb-src http://deb.nodesource.com/node_12.x $VERSION_CODENAME main" >> /etc/apt/sources.list.d/nodesource.list && \
    # Cleanup
    del-pkg build-dependencies && \
    rm -rf /tmp/* /tmp/.[!.]*

# Compile TigerVNC.
RUN \
    add-pkg --virtual build-dependencies \
        build-essential \
        curl \
        ca-certificates \
        cmake \
        autoconf \
        automake \
        libtool \
        pkg-config \
        xutils-dev \
#        xcb-util-dev \
        xtrans-dev \
        xfonts-utils \
#        font-util-dev \
        libpixman-1-dev \
        libdrm-dev \
        libx11-dev \
#        mesa-common-dev \
        libgl1-mesa-dev \
        libgcrypt-dev \
        libxkbfile-dev \
        libxfont-dev \
        libjpeg62-turbo-dev \
        libpam0g-dev \
        gnutls-dev \
        libfltk1.3-dev \
        libxrandr-dev \
        libxtst-dev \
        && \
    # Download.
    mkdir tigervnc && \
    mkdir xserver && \
    curl -# -L ${TIGERVNC_URL} | tar -xz --strip 1 -C tigervnc && \
    curl -# -L ${XSERVER_URL} | tar -xz --strip 1 -C xserver && \
    # Compile.
    cd tigervnc && \
    curl -# -L https://github.com/TigerVNC/tigervnc/commit/701605e.patch | patch -p1 && \
    cmake -G "Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_BUILD_TYPE=Release \
        -DINSTALL_SYSTEMD_UNITS=OFF \
        -DENABLE_NLS=OFF \
        -DENABLE_GNUTLS=ON \
        -DBUILD_VIEWER=OFF \
        && \
    make -j$(nproc) && \
    cd unix/xserver && \
    cp -r /tmp/xserver/* . && \
    patch -p1 < ../xserver120.patch && \
    autoreconf -fiv && \
    ./configure \
        --prefix=/usr \
        --sysconfdir=/etc/X11 \
        --localstatedir=/var \
        --with-xkb-path=/usr/share/X11/xkb \
        --with-xkb-output=/var/lib/xkb \
        --with-default-font-path=/usr/share/fonts/misc,/usr/share/fonts/100dpi:unscaled,/usr/share/fonts/75dpi:unscaled,/usr/share/fonts/TTF,/usr/share/fonts/Type1 \
        --disable-docs \
        --disable-unit-tests \
        \
        --with-pic \
        --disable-static \
        --disable-shared \
        \
        --disable-listen-tcp \
        --enable-listen-unix \
        --disable-listen-local \
        \
        --disable-dpms \
        \
        --disable-systemd-logind \
        --disable-config-hal \
        --disable-xorg \
        --disable-dmx \
        --disable-xvfb \
        --disable-xnest \
        --disable-xquartz \
        --disable-xwayland \
        --disable-xwayland-eglstream \
        --disable-standalone-xpbproxy \
        --disable-xwin \
        --disable-glamor \
        --disable-kdrive \
        --disable-xephyr \
        && \
    make -j$(nproc) && \
    cd ../../../ && \
    # Install.
    make DESTDIR=/tmp/tigervnc-install -C tigervnc/unix/xserver install && \
    strip /tmp/tigervnc-install/usr/bin/Xvnc && \
    cp -v /tmp/tigervnc-install/usr/bin/Xvnc /usr/bin/ && \
    make DESTDIR=/tmp/tigervnc-install -C tigervnc/unix/vncpasswd install && \
    strip /tmp/tigervnc-install/usr/bin/vncpasswd && \
    cp -v /tmp/tigervnc-install/usr/bin/vncpasswd /usr/bin/ && \
    # Cleanup
    del-pkg build-dependencies && \
    rm -rf /tmp/* /tmp/.[!.]*

# Compile nginx.
RUN \
    add-pkg --virtual build-dependencies \
        build-essential \
        curl \
        ca-certificates \
        libssl-dev \
        libpcre3-dev \
        && \
    # Download.
    mkdir nginx && \
    curl -# -L ${NGINX_URL} | tar xz --strip 1 -C nginx && \
    mkdir websockify-nginx-module && \
    curl -# -L ${NGINXWEBSOCKIFYMOD_URL} | tar xz --strip 1 -C websockify-nginx-module && \
    # Compile.
    cd nginx && \
    ./configure \
        --prefix=/var/lib/nginx \
        --sbin-path=/usr/sbin/nginx \
        --modules-path=/usr/lib/nginx/modules \
        --conf-path=/etc/nginx/nginx.conf \
        --pid-path=/var/run/nginx/nginx.pid \
        --lock-path=/var/run/nginx/nginx.lock \
        --error-log-path=/config/log/nginx/error.log \
        --http-log-path=/config/log/nginx/access.log \
        \
        --http-client-body-temp-path=/var/tmp/nginx/client_body \
        --http-proxy-temp-path=/var/tmp/nginx/proxy \
        \
        --user=app \
        --group=app \
        \
        --with-threads \
        --with-file-aio \
        --with-http_ssl_module \
        --with-pcre \
        --with-pcre-jit \
        \
        --without-http_charset_module \
        --without-http_gzip_module \
        --without-http_ssi_module \
        --without-http_userid_module \
        --without-http_access_module \
        --without-http_auth_basic_module \
        --without-http_mirror_module \
        --without-http_autoindex_module \
        --without-http_geo_module \
        --without-http_split_clients_module \
        --without-http_referer_module \
        --without-http_rewrite_module \
        --without-http_fastcgi_module \
        --without-http_uwsgi_module \
        --without-http_scgi_module \
        --without-http_grpc_module \
        --without-http_memcached_module \
        --without-http_limit_conn_module \
        --without-http_limit_req_module \
        --without-http_empty_gif_module \
        --without-http_browser_module \
        --without-http_upstream_hash_module \
        --without-http_upstream_ip_hash_module \
        --without-http_upstream_least_conn_module \
        --without-http_upstream_keepalive_module \
        --without-http_upstream_zone_module \
        \
        --with-stream \
        --with-stream_ssl_module \
        \
        --add-module=/tmp/websockify-nginx-module \
        && \
    make -j$(nproc) && \
    # Install.
    make install && \
    strip /usr/sbin/nginx && \
    cd .. && \
    # Cleanup.
    del-pkg build-dependencies && \
    find /etc/nginx ! -name "mime.types" -type f -exec rm -v {} ';' && \
    rm -r \
        /var/lib/nginx \
        /config/log \
        && \
    rm -rf /tmp/* /tmp/.[!.]*

# Install packages.
RUN \
    apt-get -q update && \
    LIBPNG="$(apt-cache depends libpng-dev | grep 'Depends: libpng' | awk '{print $2}')" && \
    add-pkg \
        # TigerVNC dependencies
        libgl1-mesa-glx \
        libxfont2 \
#        xkbcomp \
        x11-xkb-utils \
        xkb-data \
#        xkeyboard-config \
        # X11 VNC server dependencies
#        openssl \
#        libxtst6 \
#        libxcomposite1 \
#        $LIBPNG \
#        stunnel \
        # X virtual framebuffer display server
#        xvfb \
        # Used to determine when the X server is ready
        x11-utils \
        # Used to determine if nginx is ready.
        netcat \
        # Openbox window manager
        openbox \ 
        # For ifconfig
        net-tools \
        # Needed to generate self-signed certificates
        openssl \
        && \
    # Remove some unneeded stuff.
    rm -rf /var/cache/fontconfig/*

# Install noVNC.
RUN \
    add-pkg --virtual build-dependencies curl ca-certificates unzip nodejs && \
    mkdir noVNC && \
    curl -sS -L ${NOVNC_URL} | tar -xz --strip 1 -C noVNC && \
    mkdir -p /opt/novnc/include && \
    mkdir -p /opt/novnc/js && \
    mkdir -p /opt/novnc/css && \
    NOVNC_CORE="\
        noVNC/include/util.js \
        noVNC/include/webutil.js \
        noVNC/include/base64.js \
        noVNC/include/websock.js \
        noVNC/include/des.js \
        noVNC/include/keysymdef.js \
        noVNC/include/keyboard.js \
        noVNC/include/input.js \
        noVNC/include/display.js \
        noVNC/include/rfb.js \
        noVNC/include/keysym.js \
        noVNC/include/inflator.js \
    " && \
    cp -v $NOVNC_CORE /opt/novnc/include/ && \
    # Minify noVNC core JS files
    env HOME=/tmp npm install --cache /tmp/.npm uglify-js source-map && \
    ./node_modules/uglify-js/bin/uglifyjs \
        --compress --mangle --source-map \
        --output /opt/novnc/js/novnc-core.min.js -- $NOVNC_CORE && \
    env HOME=/tmp npm uninstall --cache /tmp/.npm uglify-js source-map && \
    sed-patch 's|"noVNC/|"/|g' /opt/novnc/js/novnc-core.min.js.map && \
    echo -e "\n//# sourceMappingURL=/js/novnc-core.min.js.map" >> /opt/novnc/js/novnc-core.min.js && \
    # Install Bootstrap
    curl -sS -L -O ${BOOTSTRAP_URL} && \
    unzip bootstrap-${BOOTSTRAP_VERSION}-dist.zip && \
    cp -v bootstrap-${BOOTSTRAP_VERSION}-dist/css/bootstrap.min.css /opt/novnc/css/ && \
    cp -v bootstrap-${BOOTSTRAP_VERSION}-dist/js/bootstrap.min.js /opt/novnc/js/ && \
    # Install Font Awesome
    curl -sS -L -O ${FONTAWESOME_URL} && \
    unzip font-awesome-${FONTAWESOME_VERSION}.zip && \
    cp -vr font-awesome-${FONTAWESOME_VERSION}/fonts /opt/novnc/ && \
    cp -v font-awesome-${FONTAWESOME_VERSION}/css/font-awesome.min.css /opt/novnc/css/ && \
    # Install JQuery
    curl -sS -L -o /opt/novnc/js/jquery.min.js ${JQUERY_URL} && \
    curl -sS -L -o /opt/novnc/js/jquery.ui.touch-punch.min.js ${JQUERY_UI_TOUCH_PUNCH_URL} && \
    # Cleanup
    del-pkg build-dependencies && \
    rm -rf /tmp/* /tmp/.[!.]*

# Generate default DH params.
RUN \
    echo "Generating default DH parameters (2048 bits)..." && \
    env HOME=/tmp openssl dhparam \
        -out "/defaults/dhparam.pem" \
        2048 \
        > /dev/null 2>&1

# Add files.
COPY rootfs/ /

# Set version to CSS and JavaScript file URLs.
RUN sed-patch "s/UNIQUE_VERSION/$(date | md5sum | cut -c1-10)/g" /opt/novnc/index.vnc

# Minify noVNC UI JS files.
RUN \
    add-pkg --virtual build-dependencies nodejs && \
    NOVNC_UI="\
        /opt/novnc/app/modulemgr.js \
        /opt/novnc/app/ui.js \
        /opt/novnc/app/modules/hideablenavbar.js \
        /opt/novnc/app/modules/dynamicappname.js \
        /opt/novnc/app/modules/password.js \
        /opt/novnc/app/modules/clipboard.js \
        /opt/novnc/app/modules/autoscaling.js \
        /opt/novnc/app/modules/clipping.js \
        /opt/novnc/app/modules/viewportdrag.js \
        /opt/novnc/app/modules/fullscreen.js \
        /opt/novnc/app/modules/virtualkeyboard.js \
        /opt/novnc/app/modules/rightclick.js \
    " && \
    env HOME=/tmp npm install --cache /tmp/.npm uglify-js && \
    ./node_modules/uglify-js/bin/uglifyjs \
        --compress --mangle --source-map \
        --output /opt/novnc/js/novnc-ui.min.js -- $NOVNC_UI && \
    env HOME=/tmp npm uninstall --cache /tmp/.npm uglify-js && \
    echo -e "\n//# sourceMappingURL=/js/novnc-ui.min.js.map" >> /opt/novnc/js/novnc-ui.min.js && \
    sed-patch 's/\/opt\/novnc//g' /opt/novnc/js/novnc-ui.min.js.map && \
    # Cleanup
    del-pkg build-dependencies && \
    rm -rf /tmp/* /tmp/.[!.]*

# Generate and install favicons.
RUN \
    APP_ICON_URL=https://github.com/jlesage/docker-templates/raw/master/jlesage/images/generic-app-icon.png && \
    install_app_icon.sh "$APP_ICON_URL"

# Set environment variables.
ENV \
    DISPLAY_WIDTH=1280 \
    DISPLAY_HEIGHT=768

# Expose ports.
#   - 5800: VNC web interface
#   - 5900: VNC
EXPOSE 5800 5900

# Metadata.
ARG IMAGE_VERSION=unknown
LABEL \
      org.label-schema.name="baseimage-gui" \
      org.label-schema.description="A minimal docker baseimage to ease creation of X graphical application containers" \
      org.label-schema.version="${IMAGE_VERSION}" \
      org.label-schema.vcs-url="https://github.com/jlesage/docker-baseimage-gui" \
      org.label-schema.schema-version="1.0"
